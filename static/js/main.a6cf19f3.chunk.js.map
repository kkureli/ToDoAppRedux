{"version":3,"sources":["mapTasks.js","App.js","Store/actions.js","serviceWorker.js","Store/reducer.js","index.js"],"names":["connect","state","task","date","tasksList","done","dispatch","deleteBtnHandler","index","type","taskDone","id","updateTask","updatedTaskText","taskId","updateDate","updatedTaskDate","updatedDateText","props","editPressed","dateEditPressed","map","uuid","doneBtnId","editBtnId","dateEditId","dateDoneId","dateId","key","Checkbox","checked","includes","onChange","name","color","className","onClick","document","getElementById","classList","remove","contentEditable","focus","add","editButtonHandler","class","style","marginLeft","taskObjId","updatedTask","innerText","doneBtnPressed","console","log","editDateHandler","updatedDate","doneDatePressed","Button","App","memo","Container","fluid","Row","Col","marginBottom","marginTop","onSubmit","event","action","TextField","onTaskChange","required","label","onDateChange","InputLabelProps","shrink","IconButton","Table","striped","bordered","hover","variant","Boolean","window","location","hostname","match","initialState","reducer","target","value","preventDefault","updatedTasks","obj","push","removedTasksList","splice","doneUpdated","indexOf","tasksArr","find","tasksArray","tasks","store","createStore","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uXA4JA,IA4BeA,eA5BS,SAAAC,GACtB,MAAO,CACLC,KAAMD,EAAMC,KACZC,KAAMF,EAAME,KACZC,UAAWH,EAAMG,UACjBC,KAAMJ,EAAMI,SAIW,SAAAC,GACzB,MAAO,CACLC,iBAAkB,SAAAC,GAAK,OAAIF,EAAS,CAAEG,KAAM,aAAcD,MAAOA,KACjEE,SAAU,SAAAC,GAAE,OAAIL,EAAS,CAAEG,KAAM,WAAYE,GAAIA,KACjDC,WAAY,SAACC,EAAiBC,GAAlB,OACVR,EAAS,CACPG,KAAM,aACNI,gBAAiBA,EACjBC,OAAQA,KAEZC,WAAY,SAACC,EAAiBF,GAAlB,OACVR,EAAS,CACPG,KAAM,aACNQ,gBAAiBD,EACjBF,OAAQA,QAKDd,EAjLf,SAAkBkB,GAChB,IAAIC,GAAc,EACdC,GAAkB,EAgJtB,OAlFSF,EAAMd,UAAUiB,KAAI,SAACnB,EAAMM,GAChC,IAAIM,EAASQ,MACTC,EAAYD,MACZE,EAAYF,MACZG,EAAaH,MACbI,EAAaJ,MACbK,EAASL,MACb,OACE,wBAAIM,IAAKN,OACP,4BACE,kBAACO,EAAA,EAAD,CACEC,QAASZ,EAAMb,KAAK0B,SAAS7B,EAAKS,IAClCqB,SAAU,kBAAMd,EAAMR,SAASR,EAAKS,KACpCsB,KAAK,WACLC,MAAM,aAGV,4BACE,0BACEvB,GAAIG,EACJqB,UAAWjB,EAAMb,KAAK0B,SAAS7B,EAAKS,IAAM,OAAS,IAElDT,EAAKA,KAAM,KAEd,uBACES,GAAIa,EACJY,QAAS,kBAtFG,SAACtB,EAAQS,EAAWC,GAC1C,GAAKL,EAUE,CACLA,GAAc,EACCkB,SAASC,eAAef,GAC9BgB,UAAUC,OAAO,UAC1B,IAAItC,EAAOmC,SAASC,eAAexB,GACnCZ,EAAKuC,gBAAkB,OACvBvC,EAAKwC,QACSL,SAASC,eAAed,GAC9Be,UAAUC,OAAO,cAlBT,CAChBrB,GAAc,EACCkB,SAASC,eAAef,GAC9BgB,UAAUC,OAAO,UAC1B,IAAItC,EAAOmC,SAASC,eAAexB,GACnCZ,EAAKuC,gBAAkB,OAEvBvC,EAAKwC,QACSL,SAASC,eAAed,GAC9Be,UAAUI,IAAI,WA4ECC,CAAkB9B,EAAQS,EAAWC,IACpDqB,MACE3B,EAAMb,KAAK0B,SAAS7B,EAAKS,IACrB,2BACA,oBAENmC,MAAO,CAAEC,WAAY,UAEvB,uBACEX,QAAS,kBAhDA,SAACtB,EAAQkC,GAC5B,IAAIC,EAAcZ,SAASC,eAAexB,GAAQoC,UAClDhC,EAAMN,WAAWqC,EAAaD,GA8CLG,CAAerC,EAAQZ,EAAKS,KAC3CA,GAAIY,EACJuB,MAAO,CAAEC,WAAY,QACrBF,MACE1B,EACI,2BACA,iCAIV,4BACE,0BACER,GAAIgB,EACJQ,UAAWjB,EAAMb,KAAK0B,SAAS7B,EAAKS,IAAM,OAAS,IAElDT,EAAKC,MAER,uBACEQ,GAAIc,EACJW,QAAS,kBA3FC,SAACT,EAAQJ,EAAWC,GACxC,GAAKJ,EAWE,CACLA,GAAkB,EACHiB,SAASC,eAAef,GAC9BgB,UAAUC,OAAO,UAC1B,IAAItC,EAAOmC,SAASC,eAAeX,GACnCzB,EAAKuC,gBAAkB,OACvBvC,EAAKwC,QACSL,SAASC,eAAed,GAC9Be,UAAUC,OAAO,cAnBL,CACpBpB,GAAkB,EACHiB,SAASC,eAAef,GAC9BgB,UAAUC,OAAO,UAC1B,IAAItC,EAAOmC,SAASC,eAAeX,GACnCzB,EAAKuC,gBAAkB,OACvBW,QAAQC,IAAI,IAAK1B,GAEjBzB,EAAKwC,QACSL,SAASC,eAAed,GAC9Be,UAAUI,IAAI,WAgFCW,CAAgB3B,EAAQD,EAAYD,IACnDoB,MACE3B,EAAMb,KAAK0B,SAAS7B,EAAKS,IACrB,2BACA,oBAENmC,MAAO,CAAEC,WAAY,UAEvB,uBACEX,QAAS,kBAvEC,SAACT,EAAQqB,GAC7B,IAAIO,EAAclB,SAASC,eAAeX,GAAQuB,UAClDE,QAAQC,IAAIE,GAEZrC,EAAMH,WAAWwC,EAAaP,GAmELQ,CAAgB7B,EAAQzB,EAAKS,KAC5CA,GAAIe,EACJoB,MAAO,CAAEC,WAAY,QACrBF,MACE1B,EACI,2BACA,iCAIV,4BACE,kBAACsC,EAAA,EAAD,CAAQrB,QAAS,kBAAMlB,EAAMX,iBAAiBC,KAC5C,uBAAGsC,MAAO,CAAEZ,MAAO,OAASW,MAAM,oCClI1Ca,EAAMC,gBAAK,SAAAzC,GACf,OACE,yBAAKiB,UAAU,OACb,kBAACyB,EAAA,EAAD,CAAWC,OAAK,EAAC1B,UAAU,QACzB,kBAAC2B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,wBAAI5B,UAAU,cAAd,mBAGJ,kBAAC2B,EAAA,EAAD,CACE3B,UAAU,kBACVW,MAAO,CAAEkB,aAAc,OAAQC,UAAW,SAE1C,kBAACF,EAAA,EAAD,KACE,0BAAMG,SAAU,SAAAC,GAAK,OAAIjD,EAAMgD,SAASC,IAAQC,OAAO,IACrD,kBAACC,EAAA,EAAD,CACErC,SAAU,SAAAmC,GAAK,OAAIjD,EAAMoD,aAAaH,IACtCI,UAAQ,EACR5D,GAAG,iBACH6D,MAAM,gBAGR,kBAACH,EAAA,EAAD,CACEE,UAAQ,EACRvC,SAAU,SAAAmC,GAAK,OAAIjD,EAAMuD,aAAaN,IACtCxD,GAAG,OACH6D,MAAM,OACN/D,KAAK,OACLqC,MAAO,CAAEC,WAAY,QACrB2B,gBAAiB,CACfC,QAAQ,KAGZ,kBAACC,EAAA,EAAD,CAAYnE,KAAK,UACf,kBAAC,IAAD,UAKR,kBAACqD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,6BACE,kBAACc,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,QAAQ,QACpC,+BACE,4BACE,oCACA,oCACA,oCACA,wCAGJ,+BACE,kBAAC,EAAD,WAMT7B,QAAQC,IAAI,KAAMnC,EAAMd,gBA2BlBJ,eArBS,SAAAC,GACtB,MAAO,CACLC,KAAMD,EAAMC,KACZC,KAAMF,EAAME,KACZC,UAAWH,EAAMG,UACjBC,KAAMJ,EAAMI,SAIW,SAAAC,GACzB,MAAO,CACLgE,aAAc,SAAAH,GAAK,OAAI7D,EAAS,CAAEG,KAAM,eAAgB0D,MAAOA,KAC/DM,aAAc,SAAAN,GACZ7D,EAAS,CAAEG,KC5FW,eD4FqB0D,MAAOA,KAEpDD,SAAU,SAAAC,GACR7D,EAAS,CAAEG,KC9FS,aD8FqB0D,MAAOA,QAKvCnE,CAA6C0D,GEzFxCwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4BCdAC,EAAe,CACnBrF,KAAM,GACNC,KAAM,GACNC,UAAW,CAAC,CAAEF,KAAM,WAAYC,KAAM,aAAcQ,GAAIW,QACxDjB,KAAM,IAsFOmF,EAnFC,WAAmC,IAAlCvF,EAAiC,uDAAzBsF,EAAcnB,EAAW,uCAChD,OAAQA,EAAO3D,MACb,IFbwB,eEgBtB,OAFA2C,QAAQC,IAAIpD,GAEL,eACFA,EADL,CAEEC,KAAMkE,EAAOD,MAAMsB,OAAOC,QAG9B,IFpBwB,eEqBtB,OAAO,eACFzF,EADL,CAEEE,KAAMiE,EAAOD,MAAMsB,OAAOC,QAG9B,IFzBsB,aE0BpBtB,EAAOD,MAAMwB,iBACb,IAAIC,EAAY,YAAO3F,EAAMG,WAEzByF,EAAM,CACR3F,KAAMD,EAAMC,KACZC,KAAMF,EAAME,KACZQ,GAAIW,OAKN,OAFAsE,EAAaE,KAAKD,GAEX,eACF5F,EADL,CAEEG,UAAWwF,IAGf,IFxCsB,aEyCpB,IAAIG,EAAgB,YAAO9F,EAAMG,WAEjC,OADA2F,EAAiBC,OAAO5B,EAAO5D,MAAO,GAC/B,eACFP,EADL,CAEEG,UAAW2F,IAGf,IFjDoB,WEkDlB,GAAK9F,EAAMI,KAAK0B,SAASqC,EAAOzD,IAOzB,CACL,IAAIsF,EAAW,YAAOhG,EAAMI,MAE5B,OADA4F,EAAYD,OAAOC,EAAYC,QAAQ9B,EAAOzD,IAAK,GAC5C,eACFV,EADL,CAEEI,KAAM4F,IAXR,IAAIA,EAAW,YAAOhG,EAAMI,MAE5B,OADA4F,EAAYH,KAAK1B,EAAOzD,IACjB,eACFV,EADL,CAEEI,KAAM4F,IAUZ,IF/DsB,aEgEpB,IAAIE,EAAQ,YAAOlG,EAAMG,WACrBF,EAAOiG,EAASC,MAAK,SAAAlG,GACvB,OAAOA,EAAKS,KAAOyD,EAAOtD,UAI5B,OAFAZ,EAAKA,KAAOkE,EAAOvD,gBAEZ,eACFZ,EADL,CAEEG,UAAW+F,IAEf,IFzEsB,aE0EpB,IAAIE,EAAU,YAAOpG,EAAMG,WACvBkG,EAAQD,EAAWD,MAAK,SAAAlG,GAC1B,OAAOA,EAAKS,KAAOyD,EAAOtD,UAI5B,OAFAwF,EAAMnG,KAAOiE,EAAOnD,gBAEb,eACFhB,EADL,CAEEG,UAAWiG,IAGjB,OAAOpG,GClFHsG,EAAQC,YAAYhB,GAE1BiB,IAASC,OACP,kBAAC,IAAD,CAAUH,MAAOA,GACf,kBAAC,EAAD,OAEFlE,SAASC,eAAe,SFoHpB,kBAAmBqE,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9D,QAAQ8D,MAAMA,EAAMC,c","file":"static/js/main.a6cf19f3.chunk.js","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Button from \"@material-ui/core/Button\";\nimport uuid from \"react-uuid\";\nimport style from \"./Store/style.css\";\n\nfunction mapTasks(props) {\n  let editPressed = false;\n  let dateEditPressed = false;\n\n  let editButtonHandler = (taskId, doneBtnId, editBtnId) => {\n    if (!editPressed) {\n      editPressed = true;\n      let doneIcon = document.getElementById(doneBtnId);\n      doneIcon.classList.remove(\"hidden\");\n      let task = document.getElementById(taskId);\n      task.contentEditable = \"true\";\n\n      task.focus();\n      let editBtn = document.getElementById(editBtnId);\n      editBtn.classList.add(\"hidden\");\n    } else {\n      editPressed = false;\n      let doneIcon = document.getElementById(doneBtnId);\n      doneIcon.classList.remove(\"hidden\");\n      let task = document.getElementById(taskId);\n      task.contentEditable = \"true\";\n      task.focus();\n      let editBtn = document.getElementById(editBtnId);\n      editBtn.classList.remove(\"hidden\");\n    }\n  };\n\n  let editDateHandler = (dateId, doneBtnId, editBtnId) => {\n    if (!dateEditPressed) {\n      dateEditPressed = true;\n      let doneIcon = document.getElementById(doneBtnId);\n      doneIcon.classList.remove(\"hidden\");\n      let task = document.getElementById(dateId);\n      task.contentEditable = \"true\";\n      console.log(\"t\", dateId);\n\n      task.focus();\n      let editBtn = document.getElementById(editBtnId);\n      editBtn.classList.add(\"hidden\");\n    } else {\n      dateEditPressed = false;\n      let doneIcon = document.getElementById(doneBtnId);\n      doneIcon.classList.remove(\"hidden\");\n      let task = document.getElementById(dateId);\n      task.contentEditable = \"true\";\n      task.focus();\n      let editBtn = document.getElementById(editBtnId);\n      editBtn.classList.remove(\"hidden\");\n    }\n  };\n\n  let doneBtnPressed = (taskId, taskObjId) => {\n    let updatedTask = document.getElementById(taskId).innerText;\n    props.updateTask(updatedTask, taskObjId);\n  };\n\n  let doneDatePressed = (dateId, taskObjId) => {\n    let updatedDate = document.getElementById(dateId).innerText;\n    console.log(updatedDate);\n\n    props.updateDate(updatedDate, taskObjId);\n  };\n\n  const mapTasksList = () => {\n    return props.tasksList.map((task, index) => {\n      let taskId = uuid();\n      let doneBtnId = uuid();\n      let editBtnId = uuid();\n      let dateEditId = uuid();\n      let dateDoneId = uuid();\n      let dateId = uuid();\n      return (\n        <tr key={uuid()}>\n          <td>\n            <Checkbox\n              checked={props.done.includes(task.id)}\n              onChange={() => props.taskDone(task.id)}\n              name=\"checkedB\"\n              color=\"primary\"\n            />\n          </td>\n          <td>\n            <span\n              id={taskId}\n              className={props.done.includes(task.id) ? \"done\" : \"\"}\n            >\n              {task.task}{\" \"}\n            </span>\n            <i\n              id={editBtnId}\n              onClick={() => editButtonHandler(taskId, doneBtnId, editBtnId)}\n              class={\n                props.done.includes(task.id)\n                  ? \"hidden fas fa-pencil-alt\"\n                  : \"fas fa-pencil-alt\"\n              }\n              style={{ marginLeft: \"15px\" }}\n            ></i>\n            <i\n              onClick={() => doneBtnPressed(taskId, task.id)}\n              id={doneBtnId}\n              style={{ marginLeft: \"15px\" }}\n              class={\n                editPressed\n                  ? \"fas fa-check-circle show\"\n                  : \"hidden fas fa-check-circle \"\n              }\n            ></i>\n          </td>\n          <td>\n            <span\n              id={dateId}\n              className={props.done.includes(task.id) ? \"done\" : \"\"}\n            >\n              {task.date}\n            </span>\n            <i\n              id={dateEditId}\n              onClick={() => editDateHandler(dateId, dateDoneId, dateEditId)}\n              class={\n                props.done.includes(task.id)\n                  ? \"hidden fas fa-pencil-alt\"\n                  : \"fas fa-pencil-alt\"\n              }\n              style={{ marginLeft: \"15px\" }}\n            ></i>\n            <i\n              onClick={() => doneDatePressed(dateId, task.id)}\n              id={dateDoneId}\n              style={{ marginLeft: \"15px\" }}\n              class={\n                editPressed\n                  ? \"fas fa-check-circle show\"\n                  : \"hidden fas fa-check-circle \"\n              }\n            ></i>\n          </td>\n          <td>\n            <Button onClick={() => props.deleteBtnHandler(index)}>\n              <i style={{ color: \"red\" }} class=\"fas fa-trash-alt fa-lg\"></i>\n            </Button>\n          </td>\n        </tr>\n      );\n    });\n  };\n  return mapTasksList();\n}\n\nconst mapStateToProps = state => {\n  return {\n    task: state.task,\n    date: state.date,\n    tasksList: state.tasksList,\n    done: state.done\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    deleteBtnHandler: index => dispatch({ type: \"taskRemove\", index: index }),\n    taskDone: id => dispatch({ type: \"taskDone\", id: id }),\n    updateTask: (updatedTaskText, taskId) =>\n      dispatch({\n        type: \"taskUpdate\",\n        updatedTaskText: updatedTaskText,\n        taskId: taskId\n      }),\n    updateDate: (updatedTaskDate, taskId) =>\n      dispatch({\n        type: \"dateUpdate\",\n        updatedDateText: updatedTaskDate,\n        taskId: taskId\n      })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(mapTasks);\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Table from \"react-bootstrap/Table\";\nimport TextField from \"@material-ui/core/TextField\";\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Button from \"@material-ui/core/Button\";\nimport { connect } from \"react-redux\";\nimport * as actionTypes from \"./Store/actions\";\nimport TasksMapper from \"./mapTasks\";\nimport { memo } from \"react\";\nimport style from \"./Store/style.css\";\n\nconst App = memo(props => {\n  return (\n    <div className=\"App\">\n      <Container fluid className=\"mt-3\">\n        <Row>\n          <Col>\n            <h1 className=\"text-light\">ToDo List App</h1>\n          </Col>\n        </Row>\n        <Row\n          className=\"no-gutters mx-0\"\n          style={{ marginBottom: \"50px\", marginTop: \"20px\" }}\n        >\n          <Col>\n            <form onSubmit={event => props.onSubmit(event)} action=\"\">\n              <TextField\n                onChange={event => props.onTaskChange(event)}\n                required\n                id=\"standard-basic\"\n                label=\"Description\"\n              />\n\n              <TextField\n                required\n                onChange={event => props.onDateChange(event)}\n                id=\"date\"\n                label=\"Date\"\n                type=\"date\"\n                style={{ marginLeft: \"15px\" }}\n                InputLabelProps={{\n                  shrink: true\n                }}\n              />\n              <IconButton type=\"submit\">\n                <AddCircleIcon></AddCircleIcon>\n              </IconButton>\n            </form>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <div>\n              <Table striped bordered hover variant=\"dark\">\n                <thead>\n                  <tr>\n                    <th>Done</th>\n                    <th>Task</th>\n                    <th>Date</th>\n                    <th>Remove</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <TasksMapper></TasksMapper>\n                </tbody>\n              </Table>\n            </div>\n          </Col>\n        </Row>\n        {console.log(\"as\", props.tasksList)}\n      </Container>\n    </div>\n  );\n});\n\nconst mapStateToProps = state => {\n  return {\n    task: state.task,\n    date: state.date,\n    tasksList: state.tasksList,\n    done: state.done\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onTaskChange: event => dispatch({ type: \"taskOnChange\", event: event }),\n    onDateChange: event => {\n      dispatch({ type: actionTypes.dateOnChange, event: event });\n    },\n    onSubmit: event => {\n      dispatch({ type: actionTypes.formSubmit, event: event });\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","export const taskOnChange = \"taskOnChange\";\nexport const dateOnChange = \"dateOnChange\";\nexport const formSubmit = \"formSubmit\";\nexport const taskDone = \"taskDone\";\nexport const taskRemove = \"taskRemove\";\nexport const taskUpdate = \"taskUpdate\";\nexport const dateUpdate = \"dateUpdate\";\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/* eslint-disable default-case */\nimport * as actionTypes from \"./actions\";\nimport uuid from \"react-uuid\";\nimport style from \"./style.css\";\nconst initialState = {\n  task: \"\",\n  date: \"\",\n  tasksList: [{ task: \"Shopping\", date: \"2020-03-11\", id: uuid() }],\n  done: []\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.taskOnChange:\n      console.log(state);\n\n      return {\n        ...state,\n        task: action.event.target.value\n      };\n\n    case actionTypes.dateOnChange:\n      return {\n        ...state,\n        date: action.event.target.value\n      };\n\n    case actionTypes.formSubmit:\n      action.event.preventDefault();\n      let updatedTasks = [...state.tasksList];\n\n      let obj = {\n        task: state.task,\n        date: state.date,\n        id: uuid()\n      };\n\n      updatedTasks.push(obj);\n\n      return {\n        ...state,\n        tasksList: updatedTasks\n      };\n\n    case actionTypes.taskRemove:\n      let removedTasksList = [...state.tasksList];\n      removedTasksList.splice(action.index, 1);\n      return {\n        ...state,\n        tasksList: removedTasksList\n      };\n\n    case actionTypes.taskDone:\n      if (!state.done.includes(action.id)) {\n        let doneUpdated = [...state.done];\n        doneUpdated.push(action.id);\n        return {\n          ...state,\n          done: doneUpdated\n        };\n      } else {\n        let doneUpdated = [...state.done];\n        doneUpdated.splice(doneUpdated.indexOf(action.id), 1);\n        return {\n          ...state,\n          done: doneUpdated\n        };\n      }\n    case actionTypes.taskUpdate:\n      let tasksArr = [...state.tasksList];\n      let task = tasksArr.find(task => {\n        return task.id === action.taskId;\n      });\n      task.task = action.updatedTaskText;\n\n      return {\n        ...state,\n        tasksList: tasksArr\n      };\n    case actionTypes.dateUpdate:\n      let tasksArray = [...state.tasksList];\n      let tasks = tasksArray.find(task => {\n        return task.id === action.taskId;\n      });\n      tasks.date = action.updatedDateText;\n\n      return {\n        ...state,\n        tasksList: tasksArray\n      };\n  }\n  return state;\n};\n\nexport default reducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport reducer from \"./Store/reducer\";\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}